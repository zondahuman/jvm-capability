
java -client -XX:+PrintFlagsFinal Benchmark

java -server -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal Benchmark

语法结构：
Usage: jstat -help|-options
       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]
参数解释：
Options — 选项，我们一般使用 -gcutil 查看gc情况
vmid    — VM的进程号，即当前运行的java进程号
interval– 间隔时间，单位为秒或者毫秒
count   — 打印次数，如果缺省则打印无数次


jstat -gcutil -h 5 8056 1000 1000

jmap -heap 8056

jstack -l 8056

netstat -ano | find "8099"

https://yq.aliyun.com/articles/20380


JDK1.6/JDK1.7:

默认悲观策略, -XX:+UseCMSInitiatingOccupancyOnly 默认是false，就是开启悲观策略:
-server -Xms10m -Xmx10m -XX:NewSize=5m -XX:MaxNewSize=5m -XX:PermSize=2m -XX:MaxPermSize=2m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails

## -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
-server -Xms10m -Xmx10m -XX:NewSize=5m -XX:MaxNewSize=5m -XX:PermSize=2m -XX:MaxPermSize=2m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCTimeStamps -XX:+PrintGCDetails

## -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly
-server -Xms10m -Xmx10m -XX:NewSize=5m -XX:MaxNewSize=5m -XX:PermSize=2m -XX:MaxPermSize=2m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:+PrintGCTimeStamps -XX:+PrintGCDetails

## -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
## -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=90
-server -Xms10m -Xmx10m -XX:NewSize=5m -XX:MaxNewSize=5m -XX:PermSize=2m -XX:MaxPermSize=2m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=90 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails

## -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
## -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 //悲观策略
## -XX:+UseCMSCompactAtFullCollection  -XX:CMSFullGCsBeforeCompaction=1  //开启碎片压缩，同时一次GC压缩一次
-server -Xms10m -Xmx10m -XX:NewSize=5m -XX:MaxNewSize=5m -XX:PermSize=2m -XX:MaxPermSize=2m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSCompactAtFullCollection  -XX:CMSFullGCsBeforeCompaction=1 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails

-server -Xms10m -Xmx10m -XX:NewSize=5m -XX:MaxNewSize=5m -XX:PermSize=2m -XX:MaxPermSize=2m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=90 -XX:+UseCMSCompactAtFullCollection  -XX:CMSFullGCsBeforeCompaction=1 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails



-server -Xms100m -Xmx100m -XX:NewSize=20m -XX:MaxNewSize=20m -XX:PermSize=10m -XX:MaxPermSize=10m -XX:+PrintGCTimeStamps -XX:+UseCMSInitiatingOccupancyOnly -XX:+PrintGCDetails


指定悲观策略:
-server -Xms100m -Xmx100m -XX:NewSize=20m -XX:MaxNewSize=20m -XX:PermSize=10m -XX:MaxPermSize=10m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails


-server -Xms100m -Xmx100m -XX:NewSize=20m -XX:MaxNewSize=20m -XX:PermSize=10m -XX:MaxPermSize=10m -XX:-UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection  -XX:CMSInitiatingOccupancyFraction=80 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails

-server -Xms30m -Xmx30m -XX:NewSize=20m -XX:MaxNewSize=20m -XX:PermSize=10m -XX:MaxPermSize=10m -XX:-UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection  -XX:CMSInitiatingOccupancyFraction=80 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails












JDK1.8:
-Xmx10m -Xms10m -XX:+UseG1GC -XX:MetaspaceSize=5m -XX:MaxMetaspaceSize=5m -XX:MaxGCPauseMillis=50 -XX:GCPauseIntervalMillis=200 -XX:SurvivorRatio=6 -XX:InitiatingHeapOccupancyPercent=80 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=8 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails











